<?php
namespace Geissler\Converter\Standard\CSL;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-10 at 14:10:32.
 */
class CreatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Creator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Creator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\Converter\Standard\CSL\Creator::create
     * @covers Geissler\Converter\Standard\CSL\Creator::getType
     * @covers Geissler\Converter\Standard\CSL\Creator::createPerson
     * @covers Geissler\Converter\Standard\CSL\Creator::createDate
     * @covers Geissler\Converter\Standard\CSL\Creator::retrieve
     * @dataProvider dataProviderForCreate
     */
    public function testCreate($input, $titles, $types, $authors = false, $issued = false, $issuedFull = false)
    {
        $parser =   new Parser();
        $this->assertTrue($parser->parse($input));
        $this->assertTrue($this->object->create($parser->retrieve()));
        $csl    =   json_decode($this->object->retrieve(), true);
        $count  =   0;

        foreach ($csl as $entry) {
            $this->assertEquals($titles[$count], $entry['title']);
            $this->assertEquals($types[$count], $entry['type']);

            if ($authors !== false) {
                $countAuthors   =   count($authors[$count]);
                for ($i = 0; $i < $countAuthors; $i++) {
                    $this->assertEquals($authors[$count][$i]['family'], $entry['author'][$i]['family']);
                    $this->assertEquals($authors[$count][$i]['given'], $entry['author'][$i]['given']);
                }
            }

            if ($issued !== false) {
                $this->assertEquals($issued[$count]['year'], $entry['issued'][0]['year']);
                $this->assertArrayNotHasKey('day', $entry['issued'][0]);
                $this->assertArrayNotHasKey('month', $entry['issued'][0]);
            }

            if ($issuedFull !== false) {
                $this->assertEquals($issuedFull[$count]['year'], $entry['issued'][0]['year']);
                $this->assertEquals($issuedFull[$count]['day'], $entry['issued'][0]['day']);
                $this->assertEquals($issuedFull[$count]['month'], $entry['issued'][0]['month']);
            }

            $count++;
        }
    }

    public function dataProviderForCreate()
    {
        return array(
            array('[
    {
        "event": "Big Event",
        "id": "ITEM-1",
        "title": "My Anonymous Paper",
        "type": "paper-conference"
    },
    {
        "event": "Other Big Event",
        "id": "ITEM-2",
        "title": "My Anonymous Speech",
        "type": "speech"
    }
]',
                array('My Anonymous Paper', 'My Anonymous Speech'),
                array('paper-conference', 'speech'),
                false
            ),
            array('[
    {
		"id": "ITEM-1",
		"title":"Men of Taste: Gender and Authority in the French Culinary Trades, 1730-1830",
		"author": [
			{
				"family": "Davis",
				"given": "Jennifer J."
			}
		],
		"genre": "Ph.D. diss.",
        "publisher": "Pennsylvania State University, History",
		"issued": {
			"date-parts":[
				[2004]
			]
		},
		"type": "thesis"
	}
]',
                array('Men of Taste: Gender and Authority in the French Culinary Trades, 1730-1830'),
                array('thesis'),
                array(
                    array(
                        array(
                            'family'    =>  'Davis',
                            'given'     =>  'Jennifer J.'
                        )
                    )
                ),
                array(
                    array(
                        'year' => ' 2004'
                    )
                )
            ),
            array('[
    {
        "id": "ITEM-1",
        "issued": {
            "date-parts": [
                [
                    1998,
                    4,
                    10
                ]
            ]
        },
        "title": "BookA",
        "type": "article-newspaper"
    }
]',
            array('BookA'),
            array('article-newspaper'),
            false,
            false,
            array(
                array(
                    'year' => 1998,
                    'day'   =>  10,
                    'month' =>  4
                )
            ))
        );
    }

    /**
     * @covers Geissler\Converter\Standard\CSL\Creator::retrieve
     * @covers Geissler\Converter\Standard\CSL\Creator::create
     */
    public function testRetrieve()
    {
        $this->assertFalse($this->object->create(new \Geissler\Converter\Model\Entries()));
        $this->assertFalse($this->object->retrieve());
    }
}
